{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, Input, NgModule } from '@angular/core';\nimport { initialize, whenLoaded } from 'bing-maps-loader';\nimport 'bingmaps';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\n\nclass SimplyturnBingMapService {\n  constructor() {}\n\n}\n\nSimplyturnBingMapService.ɵfac = function SimplyturnBingMapService_Factory(t) {\n  return new (t || SimplyturnBingMapService)();\n};\n\nSimplyturnBingMapService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: SimplyturnBingMapService,\n  factory: SimplyturnBingMapService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SimplyturnBingMapService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nclass SimplyturnBingMapComponent {\n  constructor() {}\n\n  ngOnChanges() {}\n\n  ngAfterViewInit() {\n    initialize(this.API_KEY);\n    this.addPinToNewMap();\n  }\n\n  addPinToNewMap() {\n    let mapId = document.getElementById('map'); // whenLoaded will resolve when the Map library is loaded\n\n    whenLoaded.then(() => {\n      var map = new Microsoft.Maps.Map(mapId, {\n        /* No need to set credentials if already passed in URL */\n      }); // Generate an array of random pushpins within current map bounds\n\n      var pushpins = Microsoft.Maps.TestDataGenerator.getPushpins(this.randomNumber, map.getBounds());\n      var layer = new Microsoft.Maps.Layer();\n      layer.add(pushpins);\n      map.layers.insert(layer);\n    });\n  }\n\n}\n\nSimplyturnBingMapComponent.ɵfac = function SimplyturnBingMapComponent_Factory(t) {\n  return new (t || SimplyturnBingMapComponent)();\n};\n\nSimplyturnBingMapComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: SimplyturnBingMapComponent,\n  selectors: [[\"lib-simplyturn-bing-map\"]],\n  inputs: {\n    API_KEY: \"API_KEY\",\n    randomNumber: \"randomNumber\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"id\", \"map\"]],\n  template: function SimplyturnBingMapComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0);\n    }\n  },\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SimplyturnBingMapComponent, [{\n    type: Component,\n    args: [{\n      selector: 'lib-simplyturn-bing-map',\n      template: `<div id=\"map\"></div>`,\n      styles: []\n    }]\n  }], function () {\n    return [];\n  }, {\n    API_KEY: [{\n      type: Input\n    }],\n    randomNumber: [{\n      type: Input\n    }]\n  });\n})();\n\nclass SimplyturnBingMapModule {}\n\nSimplyturnBingMapModule.ɵfac = function SimplyturnBingMapModule_Factory(t) {\n  return new (t || SimplyturnBingMapModule)();\n};\n\nSimplyturnBingMapModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: SimplyturnBingMapModule\n});\nSimplyturnBingMapModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[BrowserModule, FormsModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SimplyturnBingMapModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [SimplyturnBingMapComponent],\n      imports: [BrowserModule, FormsModule],\n      exports: [SimplyturnBingMapComponent]\n    }]\n  }], null, null);\n})();\n/*\r\n * Public API Surface of simplyturn-bing-map\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { SimplyturnBingMapComponent, SimplyturnBingMapModule, SimplyturnBingMapService };","map":{"version":3,"sources":["D:/Work/BingMapsProject/dist/simplyturn-bing-map/fesm2015/simplyturn-bing-map.mjs"],"names":["i0","Injectable","Component","Input","NgModule","initialize","whenLoaded","FormsModule","BrowserModule","SimplyturnBingMapService","constructor","ɵfac","ɵprov","type","args","providedIn","SimplyturnBingMapComponent","ngOnChanges","ngAfterViewInit","API_KEY","addPinToNewMap","mapId","document","getElementById","then","map","Microsoft","Maps","Map","pushpins","TestDataGenerator","getPushpins","randomNumber","getBounds","layer","Layer","add","layers","insert","ɵcmp","selector","template","styles","SimplyturnBingMapModule","ɵmod","ɵinj","declarations","imports","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Component, Input, NgModule } from '@angular/core';\nimport { initialize, whenLoaded } from 'bing-maps-loader';\nimport 'bingmaps';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\n\nclass SimplyturnBingMapService {\r\n    constructor() { }\r\n}\r\nSimplyturnBingMapService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: SimplyturnBingMapService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\nSimplyturnBingMapService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: SimplyturnBingMapService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: SimplyturnBingMapService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return []; } });\n\nclass SimplyturnBingMapComponent {\r\n    constructor() {\r\n    }\r\n    ngOnChanges() { }\r\n    ngAfterViewInit() {\r\n        initialize(this.API_KEY);\r\n        this.addPinToNewMap();\r\n    }\r\n    addPinToNewMap() {\r\n        let mapId = document.getElementById('map');\r\n        // whenLoaded will resolve when the Map library is loaded\r\n        whenLoaded.then(() => {\r\n            var map = new Microsoft.Maps.Map(mapId, {\r\n            /* No need to set credentials if already passed in URL */\r\n            });\r\n            // Generate an array of random pushpins within current map bounds\r\n            var pushpins = Microsoft.Maps.TestDataGenerator.getPushpins(this.randomNumber, map.getBounds());\r\n            var layer = new Microsoft.Maps.Layer();\r\n            layer.add(pushpins);\r\n            map.layers.insert(layer);\r\n        });\r\n    }\r\n}\r\nSimplyturnBingMapComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: SimplyturnBingMapComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nSimplyturnBingMapComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: SimplyturnBingMapComponent, selector: \"lib-simplyturn-bing-map\", inputs: { API_KEY: \"API_KEY\", randomNumber: \"randomNumber\" }, usesOnChanges: true, ngImport: i0, template: `<div id=\"map\"></div>`, isInline: true });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: SimplyturnBingMapComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'lib-simplyturn-bing-map',\r\n                    template: `<div id=\"map\"></div>`,\r\n                    styles: [],\r\n                }]\r\n        }], ctorParameters: function () { return []; }, propDecorators: { API_KEY: [{\r\n                type: Input\r\n            }], randomNumber: [{\r\n                type: Input\r\n            }] } });\n\nclass SimplyturnBingMapModule {\r\n}\r\nSimplyturnBingMapModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: SimplyturnBingMapModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nSimplyturnBingMapModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: SimplyturnBingMapModule, declarations: [SimplyturnBingMapComponent], imports: [BrowserModule, FormsModule], exports: [SimplyturnBingMapComponent] });\r\nSimplyturnBingMapModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: SimplyturnBingMapModule, imports: [[BrowserModule, FormsModule]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: SimplyturnBingMapModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [SimplyturnBingMapComponent],\r\n                    imports: [BrowserModule, FormsModule],\r\n                    exports: [SimplyturnBingMapComponent],\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of simplyturn-bing-map\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { SimplyturnBingMapComponent, SimplyturnBingMapModule, SimplyturnBingMapService };\n"]},"metadata":{},"sourceType":"module"}